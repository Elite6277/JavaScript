'use strict';

// Современнные библиотеки и фреймворки

//Библиотека это более гибкое понятине это готовое решение например как react вы его подключаете  а потом используете на собственное усмтотрение формируете абсолютно любую структуру там файлов папок  вашего проекта берете только ту функуию которая вам необходима исользование библиотеки вас абсолютно не к чему не обязывает  если взять библиотеки попроще то мы с вами использовали библиотеку как axios  вы ее можете подлючать  к своему проекту и делать при помошью нее какие то запросы на сервер но сдесь нет никаких ограничений вы используете ее только тогда когда вам необходимо ее использовать  в любой части вашего  сайта либо в любой части вашего приложения вы подстраиваете библиотеку под вашу работу

// С фреймворками же все наоборот когда вы подключаете фреймворк к своему проекту то он вам будет уже диктовать все правила, framework это такое же обширное понятие которое формирует вам уже целую философию как именно создавать проект соответсвенно здесь вы уже почти не можете откланятся от какой то структуры проекта  от структуры каких то компонентов каких то элементов и тому подобное и здесь уже фреймворк диктует правило как работать с одной стороны это ограничение свободы потому что вы не может сделать шаг вправо шаг в лево, но с длугой стороны в фреймворках очень много всего полезного тоесть по факту  вы просто подкдючаете фреймворк и используете все готовые фичи и готовые функции которые уже в него включены, именно из за этого  что там много всего у вас и несколько ограничены функционал по выбору формирование приложения либо использования каких то сервисов и тому подобного

// Если же возвращятся  к библиотекам то чаще всего библиотека направлена на решение какой то одной задачи более или менее специфической поэтому там мы можем собирать наш проект  просто по куcочкам подключая те библиотеки которые на необходимы вот и вся разница между этими двумя понятиями но максимально полно вы эту разницу конечно прочуствуете когда будете использовать тот или иной инструмент


// Приложение в браузере будут называться single page application   либо вы будете встречать такую аббревиатуру как SPA  и да действительно они работают у вас в браузере как самое обычное приложение вариантов можно привести огромное множество

// Одним из критериве работы приложения в браузере это то что вот пользователь открыл одну вкладку и он может бесконечное кол-во времени работать на этой одной вкладке как самый бональный пример это figma gmail и многое другое вы много чего там можете  делать и переходить в различные вкладки все это просиходит на одной вкладке и у нас не разу не перезагружается страница такие ресуры и наз-ся single page application тоестьприложения которые работают внутри браузера

// Angular

// Angular это JavaScript фреймворк основанный на typescript
// Если говорить о производительности  фреймворка  то он наверное будет самым тяжелым из всех но работать он может чуть медленнее чем остальные потому что в него очень много включено
// Если говорить о пороге вхождения в Angular он наверное будет самым высоким  по сравнею  с react и vue потому что здесь есть много вещей которые нужно освоить:
// Преспективы очень хорошие потому что разработчик Angular это сам Google  по трендам использования он немного уступает react

// Что необходимо выучить чтобы начать работу с Angular:
//-node.js
//-TypeScript
//-Webpack
//MVC pattern это шаблон проектрирования который испольуется для создания приложений и по простому он разделяет логику приложения на визуальную часть контролирующую и выполняющую какие то дейтсвия
//- Angular



// React

// Это уже библиотека  это значит что проект на реакте вы сможете создать просто по частям как основа у вас будет именно React библиотека и к ней вы будете уже подключать различные пакеты какие то дополнительные модули которые будут улучшать ваше приложение и работать на его благо, все это осень зависит конкретно от проекта
// Интересный факт то что если вы классический верстальщик то React  вас может не очень приятно удивить дело в том  что в своем синтаксисе он использует комбинацию js вместе с верстккой эта возможность называется препроцессор JSX  и некоторых она изночально вводит в ступор, то что мы можем смешивать  JS и HTML ведь по классике мы учились то что нам нужно разделять ответственность что все лежит отдельно

// Преспектива у реакта хорошая разработчиком React является facebook

// Что нам необходимо знать или понимать чтобы выучить react

// React:
// -JSX препроцессор
// - Babel
// - Webpack
// - React
// -node.js

// Vue js это уже javascript framework и относительно предыдущих интрументов  он самый молодой

// Из за его внутренних особенностей котрые стоит отметить это то как прописываются его модули

// Преспектива тоже хорошая потому что Vue достаточно прост в обучении

// Vue.js:
// -Webpack
// -Vue
// -node.js

// Самая главная вещь все это инструменты которые позволяют вам решать одну определенную задачу для вашего заказчика  понятное дело что кокой то может подходить лучше для определенных типов приложений другой для других типов приложеий и тп и тд, И все это просто инструменты которые написаны на JavaScript знаете JavaScript вы спокойно перейдете из одного инструмента в другой

// Итог
// Angular
// Если вы хотите очень подробную документацию и поддержку тоесть легче всего какие то вещи загуглить хотите не заморачиваться а просто брат и использовать инструмент, работать в каких то крупно масштабных проектах которые будут разрастаться и разрастаться  то Angular это ваш выбор, именно для этого и был создан fraemwork  чтобы поддерживать такие большие и сложные приложения которые имеют тенденцию к расзрастанию

// React
// Если же вы оцените гибкость  и настройку под себя аод какой то проект под скорость  работы любите писать все на чистом JavaScript и не боитеcь его смешивать с HTML то тогда вам дорога в react на момент записи этого текста 12-08-2023 это самый популярный инструмент и на который больше всего вакансий есть на рынке

//Vue.js
// Если вы хотите относительно легко и быстро научиться писать чистый красивый код использовать самый легковсеный быстрый инструмент

// Но какой вы бы путь не выбрали не остонавливайтесь на достигнутом и продолжайте совершенстововаться и изучайте дополнительные инструменты вдруг они вам понадобятся в будущем

// Еще в старых проектах может встретиться jQuery 