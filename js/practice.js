'use strict';

// Ошибки. Как избежать 'поломки' своего кода 

// Учмся обрабатывать ошибки и делать так чтобы наш скрипт не падал  для этого существует коснтрукция которая наз-сы try catch

// Разбираем что здесь происходит 
// Когда скрипт видит конструкцию try catch он сначала берет весь код который находится внутри try он пытается его выполнить выполняет и если вдруг все прошло нормально без никаких ошибок то дальше участок кода с catch просто игнорируется наш код продолжает работать и дальше выполняются определенные команды 
// Но если вдруг в нашем блоке кода try возникнет абсолютно любая ошибка это может быть синтактическая ошибка либо нам сервер не ответил  либо что то вроде этого то мы с вами переместимся в блок кода catch он как раз и служит чтобы отлавливать ошибки и что то с ними делать 

// Но это еще не самое главное самый главный плюс такой конструкции то что код который написан после  этой конструкции будет так же работать тоесть серипт наш не поломается на всякий случай напомню что если у нас в скрипте возникает какая то ошибка то все дальнейшие записи все дальнейшие действия  у нас выполнятся не будут они просто лягут  а конструкция try catch позволяет нам красиво обрабатывать ошибку сказать  что если произошла ошибка то мы только выполним блок кода catch а дальше все продолжит работать 
try {
   console.log('Normal');
   console.log(a);
   console.log('result')
} catch (error) {//в наш блок catch приходит объект ошибки
   console.log(error.name);//Получаем название ошибки
   console.log(error.message);//Получаем сообщение из этой ошибки  
   console.log(error.stack);//Получаем какие действия привели к ошибке
} finally {

}

console.log('Still normal ');

//Если возникает вопрос каким образом создавать скрипты для многостраничных сайтов то нам нужен try catch

try {
   document.querySelector('.active').addEventListener('click', () => {
      console.log('click');
   });
} catch (e) {
   console.log(e);
}

console.log('normal');