"use strict"

// Прием модуль, как и зачем его использовать

// Прием модуль используется для того чтобы скрыть внутрнние детали реализации скрипта
// Приведем аналогию и рассмотрим ее преимущества
// Представьте себе книгу котарая будет сборником рассказов, хороший автор разделит ee на части и разделает, если книга будет написана одним большим сплошеым текстом  то врят ли ее кто смог бы нормально читать,точно так же и хорошие программисты делят свои программы на модули

//Хотелось бы каждый функционал разделить в отдельный файлик как это обычно делают с CSS препроцессорами вот для этого нам и понадобятся модули

// Преимущества использования модулей
// 1 Модули по своей структуре самодостаточны и независимы, хорошо разработанный модуль никак не зависит от другого кода и может быть легко изменен либо вообще удален
// 2 Они обеспечивают чистоту глобального пространства - что это значит, когда мы с вами просто создаем скрипт и объявляем переменные они заносятся в глобальную область видимости делать этого крайне не рекомендуется глобальных переменных должно быть как можно меньше, содули позволяют нам избежать загрязнение глобального пространства и также избежать конфликтных ситуаций с одинаковыми именами  ведь все данные модуля существуют только в его собственнной области видимости 

// Два основных способа создания модулей через нативную реализацию

// 1 Использовать анонимную самовызываюшуюся функцию 

const number = 1;

// Этот прием у нас наз-ся анонинимная самовызывающаяся функция, анонимная она потому что у нас просто нет имени  самовызывающяяся потому что после того как она была объявлена она сразу же вызывается на месте
// Это очень интересный прием который позволяет нам написать код сразу же ее запустить   и получить локальную область видимости  если мы не ставим эт скобкт то мы получаем function decloration а function declaration не может быть анонимной  а внутри круглых скобок она уже превращяется в function expression  а вот функциональное выражение уже может не иметь имени  

// И при помощи такой фукции мы можем создать собственнную область видимости 
(function () {
   console.log(number);
   console.log(number + 3);
});

console.log(number);

// След подход для создания модуля это использование так называемого объектного интерфейса мы с вами наш модулт записываем в переменнную и в нее уже возвращяем методы доступные снаружи 

// Наша анонимная самовызывющаяся функция создает объект она экспортирует  только те методы и возможно те свойства которые нам действительно нужны будут снаружи мы этот объект  записываем в user и теперь через точку мы можем обращятся  к этим свойствам  и методам  user.sayHello();
const user = (function () {
   const privat = function () {
      console.log('I am private');
   };
   return {
      sayHello: privat
   };
}());

user.sayHello();