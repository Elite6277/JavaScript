"use strict"
// Инкапсуляция 

// Инкапсуляция это один из принципов объекто ориентированного программирования 
// Отделение из сокрытия от внешнего мира внутренностей программы тоесть ее переменных функций и прочего наъ-ся инкапсуляцией 

// В ООП это значит что объект хранит своё состояние в приватном порядке и только методы объекта имеют доступ для его изменений 

// Зачем это делается 
// 1 Это защита от вмешательства пользователем он не сможет залезть внутрь, и что то там поменять 
// 2 Мы всегда без последствий сможем улучшать и дорабатывать нашу программу, например если механик устновить друую деталь в вашеи автомобиле вы и не заметите этого
// 3 Это удобно когда внутренности программы скрыты а мы используем лишь ее результат


// Инкапсуляция это тема сложная но понимается с практикой 
// Создание инкапсуляции в реальном примере


// Пример в функциях конструкторах
//function User(name, age) {
//   this.name = name;
//   let userAge = age;

//   this.say = function () {
//      console.log(`Имя пользователя: ${this.name}, возраст ${userAge}`)
//   };
//   this.getAge = function () {
//      return userAge;
//   };

//   this.setAge = function (age) {
//      if (typeof age === 'number' && age > 0 && age < 110) {
//         userAge = age;
//      } else {
//         console.log('Недопустимое значение');
//      }
//   };
//}

//const ivan = new User('Ivan', 27);
//console.log(ivan.name);
//console.log(ivan.getAge());

//ivan.setAge(30);
//ivan.setAge(300);
//console.log(ivan.getAge());

//ivan.say();

// Пример в классах

class User {
   constructor(name, age) {
      this.name = name;
      this._age = age;
   }


   say() {
      console.log(`Имя пользователя: ${this.name}, возраст ${this._age}`);
   }
   get age() {
      return this._age;
   }

   set age(age) {
      if (typeof age === 'number' && age > 0 && age < 110) {
         this._age = age;
      } else {
         console.log('Недопустимое значение');
      }
   }
}

const ivan = new User('Ivan', 27);
console.log(ivan.age);
ivan.age = 99;

console.log(ivan.age);

ivan.say();


// У такого синтаксиса есть свой недостаток
// Мы записали свойство которое начниается с нижнего подчеркивания так мы как программисты четко знаем что мы не будем вмешиваться в работу этого свойства на это делать абсолютно нельзя

// Изначально в JavaScript вообще не планировалось создание классов они были введены совсем недавно в 2015 году 