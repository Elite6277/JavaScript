'use strict';

// Optional changing operator  (ES11-2020)
// Оператор опциональной цепочки (.)
'use strict';

const box = document.querySelector('.box');
const block = document.querySelector('.block');

console.log(block)

//if (block) { // В потециально проблемных местах используется условие
//   console.log(block.textContent);
//}
// В потециально проблемных местах используется условие
// Тут мы спрашиваем существует ли block дальше ставим точку и если он существует то мы получаем какое то свойство
console.log(block?.textContent);
// но тут есть один подводный камень это работает на чтение свойства но если поопробрвать записать туда что то будет ошибка 

// Смысл оператора опциональной цепочки?.  в том что он проверяет выражение слева от себя и останаливает операции если оно имеет значение undefined или null и при этом возвращает undefined как результат и происходит это всё без ошибки
console.log(1 + 2);

const userData = {
   name: 'Medet',
   age: null,
   say: function () {
      console.log('Hello');
   }
}
userData.say();
userData.hey?.(); // Проверяем существует ли эта функция
//Раньше проверяли так
//if (userData && userData.skills && userData.skills.js) {
//   console.log(userData.skills.js);
//}

// А сейчас так
//Наш оператор проверит часть слева от себя если она существует то код пойдет дальше если она не существует этот код у нас прекратиться и будет возвращен undefined
console.log(userData.skills?.js);

//Нужно ставить его там где предпологаются ошибки 
//Нельзя злоупотребять им может привести к крит ошибку которая не вызовет ошибку в консоль
