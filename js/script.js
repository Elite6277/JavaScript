'use strict';

// Загрузка скриптов на страницу

//defer
// Атрибут defer сообщает браузеру что он должен продолжать обрабатывать  страницу и загружать скрипт в фоновом режиме
// Скрипты с defer никогда не блокируют страницу
// Скрипты с таким атрибутом выполняется тогда когда наше дом дерево уже готово такие скрипты будут дожидаться полной готтовности нашей страницы и они сробатывают еще до domcontentloaded
// скрипты с атрибутом defer будут загружаться последовательно

// async 
// Особенности который даёт этот атрибут 
// 1 Страница не ждет ассинхронных скриптов содержимое просто обрабатываеться и отоброжается
// 2 События DomcontentLoaded и ассинхронные скрипты не ждут друг друга
// 3 Остальные скрипты неждут async а async не ждет их

// Когда мы используем скрипты с атрибутом async мы должны быть точно уверены что этот скрипт абсолютно не зависит от дом структуры ему всеравно сформировалась она или нет и он не должен зависеть от других скриптов
//Иногда мы будем подключать сторонние скрипты которые не особо подвязаны как бод дом структуру как и под другую функциональность основном используеться для счетчиков и метрик
const p = document.querySelector('p')
console.log(p);


const script = document.createElement('script');
// Динамически  загружаемые скрипты  ведут себя как async они всеравно никого ждать не будут скрипт который загрузился здесь первым так и будет загружаться первым
script.src = "js/test.js";
//Мы можем поменять относительный порядок скриптов
script.async = false; // А так срипт будет вести себя как и обычный скрипт подкоюченнный на страничку
document.body.append(script);

function loadScript(src) {
   const script = document.createElement('script');
   // Динамически  загружаемые скрипты  ведут себя как async они всеравно никого ждать не будут скрипт который загрузился здесь первым так и будет загружаться первым
   script.src = src;
   //Мы можем поменять относительный порядок скриптов
   script.async = false; // А так срипт будет вести себя как и обычный скрипт подкоюченнный на страничку
   document.body.append(script);

}

// Теперь за счет того что мы установили ассинхронность false  они будут выполнятся строго друг за другом
loadScript("js/test.js");
loadScript("js/some.js");
