"use strict";

// Замыкание и лексическое окружение

//JavaScript гибкий язык мы можем в любой момент создавать переменные функции вложенные функции передавать их как аргумент
// Чтобы и код и мы не запутались в таких ситуациях нужен определенный механизм контроля

//Лексическое окружение  В JavaScript 
// В JavaScript   у каждой выполняемой функции блока кода и скрипта есть связанный с ними внутренний тоесть скрытый технический объект
// Leksikal environment  мы его не можем просто так увидеть
// Это лексическое окружение делится на две части  на внутреннее и внешнее
let number = 5; debugger

function logNumber() {
   let number = 4; debugger
   console.log(number);

}

number = 6;


logNumber(); debugger

//Лексическое окружение делится на два типа
//1 Внутренне лексическое окружение environment record это объект в котором как свойство хранятся все локальные переменные функции
///2 Внешнее лексическое окружение

//Лексическое окружение это объект технический объект
// Любая переменная которая находится внутри функции  или снаружи на самом деле это свойство этого объекта
//Любая переменная это свойство объекта лексического окружения
//Лексическое окружение это технический объект напрямую мы сним взаимодействовать никак не можем ни получить его ни изменить
// Его работу контролирует интерпритатор сейчас это браузер
// Лексичесое окружение существует у любого блока кода ограниченнное фигурными скобками

// Самое важное и сложное для понимания это замыкание функций

// У локального объекта лексического окружения есть ссылка на глобальное лексическое окружения
//Если функция не найдет number в своем локальном окружении оно будет обращятся к глобальному

//Функция получает последнее значение внешних переменных а старые значения переменных они нигде не сохраняются

//После того как функция отработает его лексическое окружение полностью удаляется за ее не надобностью

// Важная Особенность!
// Каждый вызов функции это создание нового лексического окружения со своими специфичными для этого вызова локальными переменными и параметрами


function createCounter() {
   let counter = 0;// Создаём новую переменную в глобальной области выполнения 

   const myFunction = function () {
      counter = counter + 1;
      return counter;
   }

   return myFunction
}

const increment = createCounter();
const c1 = increment();
const c2 = increment();
const c3 = increment();

console.log(c1, c2, c3);

// Замыкание это  функция  которая запоминает свои внешние переменные и  может получить к ним доступ
//Чтобы понять почему так происходит стоит понять термины лексическое окружение и свойство environment

//Лексическое окружение существует не толко у функций он присутсвует у любого блока кода

{
   let msg = 'hello' //Это переменная доступна только внутри лексического окружения скобок и не доступна снаружи
   //тоже самое и в условиях и в циклах и тд
}

console.log(msg);

for (let i = 0; i < 9; i++) {
   for (let j = 0; j < 9; j++) {
      let num = 3;
   }

   console.log(num)// Этот код даст ошибку потому что num существует только внутри фигурных скобок
}