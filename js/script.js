"use strict"

// Классы (ES6)
// По простому классы это красивая обертка функции конструкторов еще можно встретить понятия как синтактический сахар так что классы внутри это все те же функции
// Классы мы будем использовать особенно при создании веб приложений

// Предназначение этого приема у нас чаще всего на сайтах в наших веб приложениях будет какая то шаблонизация 
// Вмсето того чтобы каждый раз создавать слайдер описывать статью иди какие методы свойства и тд и тп  мы с вами создаем один шаблон который говорит в общем что будет делать этот компонент и потом от этого шаблона уже создаем отдельных экземпляров отдельных потомков котороые будут помещятся на наш сайт
// Таким образом используя только один участок кода мы можем создать много компонетов на сайтах котрые будут чем то отличатся

// Синтаксис класса
// 1 Начинается создание классов с ключевого слова  class дальше мы задаем название класса и он всегда должен начинаться с большой буквы это актульно для библиотек или фраемворков которые в будущем мы будем использовать

// 2 Теперь нам нужно его сконструировать тоесть какие вещи у нас будут включатся в этот шаблон что будет уметь этот класс какие вещи какие свойства в нем будут уже заданы изначально  и тому подобное
// При этом самый важный параметр это те аргументы которые будут передаваться из вне мы уже видели чтобы создать функцию конструктор мы во внутрь помещаем какие то аргументы которые кастомизируют этот элемент
// Чтобы сконструировать наш клас у нас есть такое свойство как конструктор constructor(){}
// В () мы как обычную функцию записываем те аргументы которые будут приходить
class Rectangle {
   constructor(height, width) { // Эти параметры будут приходить из вне при создании экземпляра класса
      this.height = height;
      this.width = width;
   }

   calcArea() {
      return this.height * this.width;
   }
}


// Этот класс будет наследоваться от большого класса Reactangle он будет у него брать свойтва и методв которые в нем записаны 
// Для этого есть ключевое слово extends-"наследуется от" и дальше от кого Rectangle
class ColoredRectangleWithText extends Rectangle {
   constructor(height, width, text, bgColor) {
      //Чтобы не копировать вот это this.height = height; this.width = width; каждый раз у нас есть метод super()
      super(height, width)//Она вызывает супер конструктор родителя, она просто вызвает тоже самое что было у родителя
      //Но есть одно главное правило которого никогда нельзя нарушать это то что super() должна всегда быть на первое месте в конструкторе
      //Помимо этого внутрь super(height,width) мы можем указать те свойства  которые мы хотим использовать нам не всегда нужны все свойства  
      this.text = text;
      this.bgColor = bgColor;
   }

   showMyProps() {
      console.log(`Текст: ${this.text}, цвет: ${this.bgColor}`);
   }
}

// сздесь мы создаем div это наш новый div во внутрь помещаем конструктор
//Теперь у нас есть объект который содержит все внесенные свойства
const div = new ColoredRectangleWithText(25, 10, 'Hello World', 'red');

// Метод котоый существует внутри ColoredRectangleWithText
div.showMyProps();
// А здесь уже используем метод который используется в его родителе от которого он наследовался Rectangle
console.log(div.calcArea());



// Здесь в переменную помещаем  объект который создается при помощи класса
// Теперь у нас в этой перменной лежит объект у которого есть два свойства height with и 1 метод calcArea
const square = new Rectangle(10, 10);
const long = new Rectangle(20, 100);

// Мы при помощи классов создали две очень разные конструкции которые содержут разные свойства  но при этом содержут один и тот же метод calcArea
console.log(long.calcArea());
console.log(square.calcArea());

//Когда мы передали аргументы мы должны их записать в свойсто этого нового объекта
// Классы как и функции кострукторы служат нам  для создания новых объекотов и если мы внутри будем обращаться к this то мы будем обращаться к экземпляру нового созданного объекта к каждому отдельно
// И в каждый такой новый объект мы записываем свойства например height и берем мы его из аргументов и записываеться в свойства
// Внутри между методами не нужно ставить ; точку с запятой это будет ошибка
// Здесь методы записываются просто название функции ,без ключевого слово function

// Принципы объектно ориентированного програмирования
// 1 Абстракция когда мы отделаем концепцию от ее экземпляра 
//концепция это весь class Reactangle  а экземпляр это то что создано на основе концепции
// 2 Важный принцип это наследование тоесть способность нашего объекта или класса базироваться на другом объекте или класе
// Это главный механизм для повторного использования какого то кода наследственное отношение классов у нас четко будет определять их иерархию