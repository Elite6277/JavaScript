'use strict';

//AJAX и общение с сервером

// Асинхронное выполнение задач и общение с сервером
// Один из самых наглядных примеров это фильтры в интернет магазине наш клиент наша страница делает запрос к серверу и получает от него лишь часть страницы только необходимую информацию  при этом  весь остальной интерфейс который был на странице он не обновляется он как был так и остается

// Зачем это делается
// 1 Это удлбно красиво и происходит интерактивная обработка абсолютно любых событий пользователь нажал какую то кнопочку мы что то подгрузили пользователь начал что то фильтровать мы взяли и опять что то подгрузили
// 2 У нас происходит ускорение реакции интерфейса мы не перезагружаем каждый раз страничку мы просто обновяем часть контента
// 3 Уменьшаем нагрузку на сервер и экономим трафик пользователя

// Есть недостатки
// 1 У пользователя должен быть включен JavaScript и при плохом соединенни с интернетом  может проявлятся некоторое некорректоное поведение что то может не подгрузиться что то может подвиснуть и тд и тп
// До 2017 года также была проблема с SEO оптимизацией такого контента но теперь она тоже решаем и это уже не такая уж и проблема

// AJAX = Assynchronious JavaScipt And Xml
// Чтобы наша страница наш фронтend  умел общаться с сервером нам необходимы http запросы которые мы будем отпралять
// Мы можем запрашивать данные постить данные и выполнять другие операции и чтобы все это происходило ассинхронно нам и нужна технология Ajax

// Сейчас она реализуется несколькими способами

// Разбираем самый первый вариант AJAX который реализуется при помощи XMLHTTPREAUEST на данный момент он не актуален но в проектах можно его встретить так что нужно уметь с ним работать и быть к этому готовым 

const inputRub = document.querySelector('#rub'),
   inputUsd = document.querySelector('#usd');


// Обработчик события change у нас возникает когда наш input уходит из фокуса
// Событие input происходит каждый раз  когда что то вводится или удаляется в input
inputRub.addEventListener('input', () => {
   // Используем встроенный  объект в браузере XMLHttpRequest()
   // Это конструктор который создает новый объект
   // Это  Шаблонизация в примерах мы можем создавать сколько угодно запросов и каждый раз они будут вести себя по разному и реализоваться в разных условиях
   // Теперь когда мы создали экземпляр  такого класса  у него есть свои методы свои свойства и свои события
   const request = new XMLHttpRequest();

   // Метод open помогает собирать настройки которые помогут в будущем сделать запрос
   // он принимает в себя несколько аргументов 
   // 1 аргумент это  метод который используется для запроса get post
   // 2 аргумент это путь к нашему серверу это может быть файлик это может быть что угодно но самое главное что мы прописываем url по которому будем делать запрос
   // 3 аргумент отвечает у нас за ассинхронность по умолчанию там стоит true можно и поставить false
   // 4 аргумент это логин // некоторые запросы мы можем делать только имея логин и пароль  точно также как мы авторизовывались на каких то сайтах и ресурсах
   // 5 аргумент это пароль
   //Записываются методы всегда в верхнем регистре
   // Здесь стоит вспомнить как работает синхронный и ассинхронный код 
   // Синхронный код это код который выполняется по порядку если какая то операция очень долго выполняется отсальной код ниже будем её ждать 
   // Ассинхронный код работает обратным методом они аболютно не влияют на другой код они не кого не ждут не блокирует остальной код
   // AJAX  запросы по умолчанию являются ассинхронным кодом тоесть мы послали запрос на сервер мы абсолютно не знаем сколько времени нам сервер будет отвечать и остальной код который идет после запроса он продолжит выполнятся  и потом уже когда сервер ответит наш код который был ассинхронный закончит свою работу
   // Еcть два самых популярных http метода это get и post
   //  get запрос  он направлен  на то чтобы получить какие то данные от сервера  например: получи код от сервера какой то курс валют, какие товары прямо сейчас у нас есть в интернет магазине
   //  post запрос  он направлен  на то чтобы постить  какие то данные например: если хочю зарегестрироваться то я должен заполнить какие то регистрационные данные и когда нажму кнопочку потдвердить эту форму у меня отправится пост запрос потому что я что то пощю на сервер это происходит не только с текстовыми данными мы можем постить изображения или даже какие то файлы как это происходит на клиенте В GOOGLE disk  
   request.open('GET', 'js/current.json');

   // Когда мы отправляем запрос нам нужно сказать а что именно мы отправляем, делается это для того чтобы наши трансферные протоколы четко понимали что им прередают и кода они приходят к серверу чтобы сервер понимал что он принимает в себя для всего этого сушествуют http заголовки
   //Используем заголовок который нужен  для передачи JSON файлов  setRequestHeader();
   request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
   // После того как все приготовления готовы  мы можем отправить запрос делается это с посошью метода send()
   // Этот метод в запросах будет отличаться в зависимоти от того метода который мы сейчас используем
   // когда мы отправляем GET запрос мы просто запрашиваем информацию это значит что мы по факту нечего не отправляем на сервер
   request.send();


   // Чаще всего мы с вами будем использовать событие load оно проше потому что оно сробавтывает один раз когда запрос готов
   //но когда запрос готов это не значит что он завершен успешно
   request.addEventListener('readystatechange', () => {
      // readystatechange Это событие отслеживает статус готовности нашего запроса в текуший момент 
      if (request.readyState === 4 && request.status === 200) {
         console.log(request.response);
         const data = JSON.parse(request.response);
         inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2);
      } else { // Никогда не оставляйте пользователя в неведении всегда если что то пошло не так всегда оповещайте пользователя об ошибке а то он может ввести и ждать и подумает что у вас что то сломалось приложение или сайт не работает и он просто уйдет
         inputUsd.value = 'Что-то пошло не так';
      }
   });


   // Мы получим ответ от сервера и что то начнем уже с ним делать

   // status это свойство содержит и показывает статус нашего запроса это 404 not found когда файл не найден  0 200 и тд всех их можно посмотреть в википедии
   // statusText 
   // reponse - ответ ,здесь у нас лежит  ответ от сервера 
   // readyState = проверяет текущее состояние нашего запроса все состояия у нас обозночаются либо цифрой либо словами
   //readyState в этом объекте у нас будет обозночаться циферкой и мы здесь имеем пять разный вариантов

   // 0 UNSENT  объект был создан. Метод open() еще не вызывался

   // 1 OPPENED  Метод open() был вызван

   // 2 HEADER_RECEIVED  Метод open() был вызван  доступны заголовки(headers) и статус

   // 3 LOADING Загрузка: responseText содержит частичные данные

   // 4 DONE Операция полностью завершена // Именно он нас будет интерисовать 


});