'use strict';

//События и их обработчики

//! Важнейшая тема в JavaScript то как взаимодействовать с элементами на нашей странице
//! Почти все строится на взаимодействии с элементами все технологии все какие то скрипты в будущем они будут опиратся на событийную систему

// Cобытие это сигнал от браузера что что то у нас произошло Это клик двойной клик наведение мыши убрать мышь с элемента прокрутка колесика мыши отправка данных при помощи нажатия на клавиши клавиатуре 

// ! Всё чем занимается пользователь на странице это событие и мы их можем отлавливать


// Чтобы использовать любое событие мы должны назначить обработчик события
// Обработчик это функция которая сробатывает как только событие произошло

// В JavaScript есть три способа назначить обработчики событий

// 1 Способ это использовать html atribut который  используется внутри html кода
// ! в реальных проектах 1способ такой код вообще не используетя и вообще не рекомендуется он подходит для маленьких скриптов или в тестовых проектах
// ! Иногда такие обработчики событий встретить когда подключаются метрики для не программистов

// 2 Способ Это использлвать свойство дом дерева для событий

// 1 Сначала понадобится какой то элемент на который мы будем вешать события
const btns = document.querySelectorAll('button'),
   overlay = document.querySelector('.overlay');


// Мы используем тот элемент на который мы хоти вешать это событие и дальше используем свойсто дом дерево  которая будет называться onclick дальше мы в это свойство записываем уже какое то значение и сюда идет функция по фатку уже это становится методом функция внутри будет содержать какой то код который выполнится строго после клика
//! В рельных проектах такой код тоже почти не используется у него есть одна большая проблема  видео номер 39 6.00 минута
//btn.onclick = function () {
//   alert('Click');
//}
//btn.onclick = function () {
//   alert('Second Click');
//}

// 3 Способ это addEventListener remove EventListener
//! У этого способа есть один большой плюс теперь мы можем назначать сразу несколько дейсвий на одно событие
//! Этот способ используется чаще всего
btn.addEventListener('click', () => {
   alert('Click');
}); //JavaScript будет следить за этим элементом и если у нас произошло события который мы здесь назначим то он запустит обработчик
btn.addEventListener('mouseenter', () => {// !Объект собятия у нас передаётся как аргумент в calback функцию нахывать мы его можем как угодно но обычно его назвают либо event либо e и он всегда передается первым аргументом, а если есть еще данные например  текстовые вы ставите запятую и свои данные уже передаете  следующими аргументами а первым всегда будет объект события
   console.log('Hover');
}); //первое действие мы никак не потеряли и оно будет работать вместе со вторым по очереди

//btn.addEventListener('mouseenter', (e) => {
//   console.log(e.target);
//   e.target.remove();
//});

//btn.addEventListener('click', (e) => {
//   console.log(e.target);
//   e.target.remove();
//});
//! Cобытия в JavaScripte выполняются в порядке очереди оно добавляется в очередь независимо от других событий
//JavaScript будет следить за этим элементом и если у нас произошло события который мы здесь назначим то он запустит обработчик
//Первым аргументом мы передаем название события
//Вторым  аргументом передаем callback функцию которая будет нашим обработчиком сделать это можно класическим вариантом или стрелочной функцией
// И в этой калбек функции должно быть какое то действие


//let i = 0;
const deleteElement = (e) => {
   console.log(e.currentTarget);
   console.log(e.type);
   //i++;
   //if (i == 1) {
   //   btn.removeEventListener('click', deleteElement);
   //}
};

//btn.addEventListener('click', deleteElement);
//overlay.addEventListener('click', deleteElement);

//!Всплытие событий это когда события срабатывают на самом вложенном элементе затем родителе если он у него есть и так выше и выше
// !Гораздо важнее в javascript коде это отменять стандартное поведение в браузере

//Отменяем стандартное поведение в браузере

const link = document.querySelector('a');

link.addEventListener('click', () => {

});
// калбэк функция не в стрелочном варианте
link.addEventListener('click', function (event) {
   //для того чтобы отменить стандартное поведение мы прописываем
   event.preventDefault(); //Этот участок кода всегда помещается в самое начало обработчика событий сначала прописали отменили стандартное поведение браузера потом взаимодействуем как хотим


   console.log(event.target)
});

//! Самый правильный способ Чтобы один и тот же обработчик навесить на несколько элементов
//! На этих конструкциях у нас будет строится чуть ли не половина курса
// Этот метод котрый существует у псевдомассива которая существует у псевдомасиива полученного с помощью querySelectorAll просто перебирает элементы внутри и что тоделает с элементами внутри
btns.forEach(btn => {// точно так же можно поступить с помощью пребирающей конструкци  for of но чаще всего используется for each
   btn.addEventListener('click', deleteElement, { once: true }); //3 аргументом опцией  { once: true } Мы говорим что это событие должно происходить только один раз и это хорошая замена для removeEventListener потому что не приходится писать код отдельно для этого
})

// У addEvent listeneer существует так же третий аргумент в который мы можем передавать различные опции
//Аргументы addEventlisteneer() = Тип события, обработчик, и Опция