"use strict";

//Функции
//Функции это наши действия в JavaScript они используют различные типы данных и изменяют информацию так как мы ей укажем
//Функции значитльно упрощяют наш код как и циклы
//Можем прдставить функцию как калькулятор
//Одно из самых вещей в функции это ее имя
//В круглые скопки мы будем передавать  аргументы функций оно должно быть глаголом с препиской того над чем выполняется дейсвие 
//И все это пишется в формате camelCase


//Когда функция вызывается мы можем дать ей какие то данные которые он будет использовать внутри себя
//Аргументов может быть бесконечное кол-во
//Если мы объявляем переменную внутри функции, то снаружи она уже не доступна
function showFirstMessage(text) {
   console.log(text);
   let num = 20; //когда переменная  создана внутри функции она называется локальной  переменной потому что она сущ только внутри функции
}

//После написания функции  нельзя забывать ее вызвать
showFirstMessage('Hello World');

// функция может исрользовать глобальную переменная 
let num = 20;
//Функции бывают и анонимные без имени
//Функция сначала ищет переменные внутри себя а если не находит то ищет глобальные переменные с заданным именем
//Замыкание функции это сама функция вмсете со всеми внешними переменными которая ей доступна
function showFirstMessage(text) {
   console.log(text);
   num = 10;
}

showFirstMessage('Hello world');


// Функция может нам вернуть какое то значение при помощи return
// Как только функция увидит слово return оно прекратит своё дейсвие
console.log(num)
function showFirstMessage(text) {
   console.log(text);
   num = 10;
}

showFirstMessage('Hello world');

console.log(num)

//Функция это один из способов оптимизации кода
function calc(a, b) {
   return (a + b);// Оно позваляет вернуть значение сумму во внешний мир
   console.log(dwed); // Этот код называется unreachable потому что мы его уже неможем получить после return
   //Этот код уже будет мертвым он никогда не выполнится
}

console.log(calc(4, 3));
console.log(calc(5, 3));
console.log(calc(4, 4));

function ret() {// Это функция существует еще до того как мы ее можем объявить как и var
   // Function decloration
   let num = 50;
   //

   return num; // Вытаскиваем наружу локальную переменную
}
const anotherNumber = ret();
console.log(anotherNumber);

//FUNCTION DECLARATION
function foo() {
   // код
} // тут нет
//^
//Cоздается до начала выполнения скрипта, можно вызвать перед объявлением 

//FUNCTION EXPRESSION

let foo = function () {
   //код
};//тут ставим точку с запятой

//Создается только тогда, когда доходит поток кода, можно вызвать только после обЪявления.

//Стрелочные функции 
const calc = (b, c) => b + c;// Сокращённый вариант
const calc = b => b// Если функция содержит 1 аргумент то она записывается вот так
const calc = (b, c) => { return b + c };// классический вариант
const calc = (b, c) => {
   //console.log('1');
   return b + c;
};// классический вариант

calc(2, 4)

//Не имеет своего контекста вызова this
//Функции это основы любой программы