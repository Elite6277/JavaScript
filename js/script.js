"use strict"

// Методы пребора массивов до которого у нас не дошли руки 
// Это тема будет максимально полезна когда вы уже умеете работать с сервером  тоесть например мы уже можем получать какие то даные и теперь нам необходимо их както обработать например отфильтровать либо полностью поменять каждый элемент массив и многое другое 

// Перебирать каждый элемент массива мы уже умеем метод forEach 
// Самое главное что мы должны помнить про метод forEach  это то что он нам никогда не возвращяет новый массив он  просто берет какой то массив и просто его перебирает берет например каждый отдельный элемент и например вводит в консоль или выводит на страницу и многое другое 

// Рассмотрим как веут себя другие методы
// Метод filter
// как вы можете догадаться из названия этого метода он будет фильтровать данные внутри массива 
// но конечео чтобы фильтровать нам необходимо какое то правило тоесть как это делать нашему коду ведь сначала он не знает что вы хотите от него 

// В начале создадим какой то массив
const names = ['Medet', 'Ann', 'Ksenia', 'Voldemart'];

// Следующая наша задача это получить все имена которые  меньше чем пять символов тоесть мы с вами фильтруем наши элементы и проверяем кол=во символов в каждом из этих элементов, на месте это задачи может быть абсолютно любая например получить те товары цена которых будет меньше чем тысяча условных  единиц, например получить таких людей у которых зарплата больше чем сто тысяч,  тоесть мы можем варьироать такие фильтрационные вещи и соответственно их задавать в виде функций  сейчас мы это с вами сделаем 

// Очень важное отличие метод forEach у нас просто перебирает какой то массив и не возврашает новый 
// Такие же методы как filter() как map()  те которые мы будем дальше разбирать они нам вовращяют новый массив тоесть уже както изменнённый  тоесть когда мы фильтруем  мы же не можем  перезаписать сюда значения, мы должны оставить и старый массив  и получить новый который уже отфильтрован 

//создаем новую переменную сюда будет записываться новый массив который мы получим на основе фильтрации старого для этого мы берем наш старый массив names ставим точку и метод фильтр во внутрь этого метода мы с вами должны как обычно передавать callback функцию 
// У forEach было все просто это функция которая пребирает элементы
// У filter тоже все просто мы передаем callback который перебирает элементы и возвращяет нам только те элементы которые подходят под условие 

//Сначала пишнем в классическом формате 
//name это каждый отдельный элемент который находится внутри этого массива 
const shortNames = names.filter(function (name) {
   //Теперь нам необходимо отфильтровать эти элементы 
   // Для того чтобы сделать такой filter нам необходимо из callback функции возврашать те элементы которые действительно подходят под наш критерий именно возвращять тоест мы  прописываем слово return
   return name.length < 5;// мы из этой функции возвращяем только то имя длина которого у нас будет меньше чем 5

});

console.log(shortNames);


// Второй метод который наз-ся map 
// Опять возвращяемся к forEach кого мы перебирали при помощи него каждый элемент мы каждый из этих элементов никак не трансформировали мы никакие операции с ними особо не проводили именно в исходном массиве 

// Метод map позволяет вам взять исходный массив  и изменить каждый элемент внутри него соотвественно на выходе  у вас получается опять какой то новый массив уже с измененными данными 

// Наша задача как разработчиков это прдесмотреть такие ситуации то что пользователь может всгда косячить а мы хотим получиь в нашу базу данных например или в консоль или где то дальше уже нормальные имена в нормальном формате и чтобы они все были допустим нижнего регистра очень часто в коде используется такой прием когда мы не знаем какой точно войдет сюда регистр  в ответы и мы просто приводим все к нижнему регистру  все пишем маленькими буквами и уже потом используем поэтому давайте сейчас провернем такую же операци 
const answers = ['MeDet', 'yHlas', 'Hello'];

//Этот метод позволяет нам трансформировать каждый элемент внутри  и поятное дело что для этого нам понадобится какая то callback функция  вот здест мы уже используем стрелочную функцию можно и другую 
//Говоррим что каждый элемент который будет перебираться будет обозночаться как item и здесь понадобится только одна строка поэтому мы не будем расскрывать фигурные скобки 

//const result = answers.map(item => {
//   return item.toLowerCase();
//});

// Более локаничный вариант
// Именно эта callback функция будет брать каждый элемент и переводить его в нижний регистр
const result = answers.map(item => item.toLowerCase());

// Чтобы убедиться что у нас действительно что то произошло 
console.log(result);

// Можно и так 
//Берем исходный массив который лежал  в переменной answers  
let answers = ['MeDet', 'yHlas', 'Hello'];
//мы запустили  его в метод map() этот метод нам возвращяет нам новый массив  тоесть верхний старый массив удаляется и  в нее запускается нижняя часть  но этого делать не стоит по понятия программирования ТОЕСТЬ стоит создат отдельную переменную которая будет содержать уже какие то другие результаты а исходные данные у нас уже останутся на прежнем месте 
// Метод map() мы будем частенько использовать например в библиотеке react для того чтобы как то трансформироавть данные например которые приходят из сервера 

answers = answers.map(item => item.toLowerCase());
console.log(answers);

// Следующее что мы разберем это методы every/some это два метода которые очень похожы по своей структуре и по своим задачам 
// Эти два метода возвращяет нам именнно boolean значение либо true либо false   

// some = перевод какой то, он береи массив перебирает его его и если у нас хотябы какой то элемент только один хотябы подходит по какому то условию которое мы зададим опять же в callback функцию то в таком случае он нам вернет true и если нет то false  

// Рассматриваем на примере

// Создаем массив 
const some = [4, 'qwq', 'srewrwe'];

// След наша задача это проверить есть ли внутри нашего массива хотябы одно число 
// Чтобы увидет реззультаты в console.log мы будем вводить конструкцию обращаемся к массиву и спользуем метод some  тоесть мы хотим спросить если там хоть одно число, для этого  нужно  задать callback функцию, говорим что мы перебираем элементы каждый элемент наз-ся item
//Не забываем что если мы в стрелочой callback функции не расскрываем фигурные сккобки то ключеове слово return подставляется автоматически поэтому представлем что у нас есть return  после =>  и мы прописываем условие небольшое что тип данных item   унас будет равен number
// Мы спрашиваем есть ли среди этих элементов хотябы одно число  если есть выведеться true если нет false
// Если используем some то хотябы один элемент  у нас должен соответствовать условию 
//console.log(some.some(item => typeof (item) === 'number'));

//Теперь расммотрим как работает метод every()
//Этот метод работает так что если все элементы тоесть every элемент внутри нашего масиива подходит под это условие только в таком случае наш метод вернет true 
console.log(some.every(item => typeof (item) === 'number'));// получим false 

// Пример зачем использвать, если вы пишете какую то статистическую программу которая проверяет определенные данные то вы проверяете что например если зарплата  у всех людей больше чем 100$ то мы возвращяем true тоесть выполняем  какое то действие дальше в программе соответсвенно здесь нам понадобиься every  что проверить каждый элемент 
// Или Если мы хотите проверить что зарплата какого то  хотябы человека больше чем 1000$ то мы используем сам 

// ТОже самое можно применять к абсолютно любым данным которые у нас есть статичные или приходят с сервера и тд, понятное дело что  можно записать и вручную всю эту реализацию обычным каким то циклом или тем жe forEach перебрать, брать какую то переменную counter тоесть счетчик и туда что то сохранять  и потом проверять это условием и тд, но зачем нам все эти условия выполнять если у нас уже есть такой готовый метод который  мы просто берем и используем 

// Метод reduce()это наиболее сложный для понимания новичков поэтому мы го разбираем последним 
// Служит он для того чтобы схлопывать или собирать массив в одно единое целое , особенно это касается числовых данных именно на них мы и разберем

const arr = [4, 5, 1, 3, 2, 6];
// первый заход  sum 0 current 4
// второй заход  sum 4 current 5
// третий заход  sum 9 current 1
// четвертый заход  sum 10 current 3
// пятый заход  sum 13 current 2
// шестой заход  sum 15 current 6
// В финале получим 21

// Наша задача это взять и быстро получить  сумму  всех этих элементов 
// Используем метод reduce чтобы взять и собрать  весь этот массив во едино 

// пример 

// Метод  reduce() тоже возвращяет новый уже какой то сформированный результат  который мы поместим в переменную result и здесь понадобится уже callback функция которая принимает два аргумента поэтому обернем их в скобочки 
const res = arr.reduce((sum, current) => sum + current);// все что будет делать моя функция это складывать два этих аргумента
console.log(res);
// Когда мы запускаем метод reduce() у него есть два аргумента которые подставляются автоматически первый аргумент  это сумма всех наших элементов  это аргумент который подставляются автоматически и изначально  в обычной ситуации он равен нулю
// когда первый раз запускается метод reduce опять же это метод перебора онтпроходит по каждому элементу который есть в массиве sum у нас равен нулю при этом второй аргумент current это непомредственно тот каждый элемент который приходит к ниму от массива

// reduce можно использовать не только с цифрами 
// Если у нас например есть массив со строками мы его тоже можем собрать во едино
const arr = ['M', 'e', 'd', 'e', 't'];

const res = arr.reduce((sum, current) => sum + current);
console.log(res);


//
// Список каких то продуктов которые мы хотим привести на определенную базу
const arr = ['apple', 'pear', 'plum'];

// Мы хотим чтобы у нас получилась одна большая строка которая через, будет содержать  эти все вещи 
//первый способ
const res = arr.reduce((sum, current) => sum + ',' + current, 3);// третим аргументом мы задаем начальное значение 
console.log(res);


const arr = ['apple', 'pear', 'plum'];

// Мы хотим чтобы у нас получилась одна большая строка которая через, будет содержать  эти все вещи 
//Второй способ использовать интерполяцию
const res = arr.reduce((sum, current) => `${sum}, ${current}`);// третим аргументом мы задаем начальное значение 
console.log(res);

// Метод reduce принимает еще один аргумент как второй аргумент в reuce мы можем передать какое то начальное значение 

// При помощи этих методов  можем сделать все что угодно отфильтровать перебрать массив как то его модифицировать либо потом вообще взять и схлопнуть 

//Практический пример 


// Иногда вы будете получать от серверов или от APIшек данные не в том формате в котором вы ожидаете 

// В объекте не может быть одинаковых свойств тоесть их названий 
// Главная задача это вытащить имена тех людей которые находятся в этом объекте тоесть имена которые относятся к persone 
const obj = {
   ivan: 'persone',
   ann: 'persone',
   dog: 'animal',
   cat: 'animal',
};

// Метод entries позволяет нам взять массив и превратить его в матрицу тоесть это будет массив массивов, это удобный метод когда нам нужно поработать с объектом как с массивом и с ним что то сделать 
// Был объект 
const newArr = Object.entries(obj)
   .filter(item => item[1] === 'persone')
   .map(item => item[0]);
// Тут стал массивом 
console.log(newArr);

// Если вы знаете какие  методы есть у массивов и как из объекта сделать массив то любую задачу можнорешить буквально в одну строчку 
// Мы можем запускать эти методы по цепочке  верхний пример наглядно показывает такую возможность  