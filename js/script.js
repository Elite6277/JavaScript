"use strict";

// Получение элементов со страницы


// Этот и последующие уроки будут очень важны для понимания как работает JavaScript со страиницей
// Уделаем максимальное внимание

// 1 Document object model - Объектная модель документа
// 2 Весь наш  html код является не чем иным как обычным документом точно так же как и в ворде  у котрого есть своя структура


// И  этот документ может быть представлен в виде дерева узлов при этом узлы связаны между собой отношениями родительский дочерний
//  Например у элемента body у его тега есть довольно много дочерних элементов  и при этом у каждого дочернего элемента есть  только один родитель это body

// И такую структуру мы создаем во время верстки
// И теперь когда документ сформирован мы его можем представить в виде обычного объекта именно поэтому называется объектная модель документа
// Как и у любого объекта у него могут быть свои методы и как раз их мы и будем использовать чтобы иметь доступ к определенным элементам на странице

//Чтобы обратится к дому нам необходимо использовать такую сущность как document
//Методы для разделения элементов можно разделить на две категории те которые существовали давно устоявшиеся и те которые появились недавно
//Мы начнем с первого варианта
//Самый известный из методов называется getElementbyId

const box = document.getElementById('box');//сначала мы оьращаемся к документ 'сначала' чуть позже мы уже обращяться не к документу

console.log(box);//Этот код в консоли работать не будет для него не существует объекта документ он будет работать в браузере
// По правилам id может быть только один на странице

// Мы также можем получать элементы через названия тегов но одинаковых тегов может быть десятки и сотни на странице и мы их получим в виде колекции псевдомассивов
// Псевдомассивы это тоже самое что и массивы но без всех методов 

//const btns = document.getElementsByTagName('button');
//// !!!Важно сейчас мы с вами в перменную btns получили не один какой то элемент а псевдомассив html коллекцию

//console.log(btns);


//const btns = document.getElementsByTagName('button')[1]; // сразу в переменную получаем вторую кнопку
//// !!!Важно сейчас мы с вами в перменную btns получили не один какой то элемент а псевдомассив html коллекцию

//console.log(btns);


const btns = document.getElementsByTagName('button'); // сразу в переменную получаем вторую кнопку
// !!!Важно сейчас мы с вами в перменную btns получили не один какой то элемент а псевдомассив html коллекцию

// можно использовать только тогда когда нужна определенная кнопка  для этого нужно прописать индекс той кнопки которя нужна как внизу
console.log(btns[1]);

//Если даже элемент один мы всеравно полуим коллекцию если не обратимся к индексу

// Помимо тегов мы можем использовать и классы 

const circles = document.getElementsByClassName('circle');// мы ставим сюда просто название класса мы не тсавим сюда точку . у нас метод уже знает что ищется класс
// Работает он точно также как и поиск по тегам
console.log(circles);

// HTMLCollection это псевдомассив
// Лайфхак который может помочь  getElementsByTagName  getElementsByClassName здесь написано getElements ключевое слово Elements  а у getElementbyId стоит Element и здесь четко понятно что здесь получается только один элемент


// Есть еще getElementByName  но он почти что не применяется

// Более современные методы которые появились чуть чуть попозже и они немного более функциональны

const hearts = document.querySelectorAll('.heart');// Этот метод устроен так что внутрь мы с вами помещяем css селектор, любой селектор который может понадобится здесь ограничений нет

hearts.forEach(item => {
   console.log(item);
});

// Это может быть уникальный индентификатор через#,Просто класс, вложенност класов, псевдоклассы, атрибуты, комбинация всего этого все это поддерживает мтод querySelectorAll()

// И за счет этого есть один большой плюс у этого метода у него появляется один метод который называется forEach но как не крути это все остается псевдомассивами

//Есть еще похожая функция которая называется querySelector однако при помощи него мы можем получить только первый элемент

const oneHeart = document.querySelector('div');// Помогает нам  получить только один элемент со страницы при чем он просто берет этот селектор который мы ему передали и тот элемент который попал по сочетания этого селектора тот и попал на в переменную oneheart
// Этот метод очень удобно использовать когда у нас есть элемент который довольно таки уникален по своему css селектору
console.log(oneHeart);

//Итог
//У нас есть методы которые работают на объектной модели документа в DOM в коде он завписывается как документ и работает только внутри браузера
// у него есть два метода чтобы получить только один элемент это getElementById() получает элемент по идентификатору  и querySelector() который получает первый элемент который ему попался ему под заданный селектор

//Так же мы можем получать Html колекции или по другому псевдомассивы  для этого у нас есть такие методы как getElementsByTagName(), getElementsByClassName(),  querySelectorAll(), getElementByName() здесь для того чтобы использовать элементы нам необходимо уже использовать какие то индексы[]
//Еще если это класс то точку нам не нужно ставит внутри скобки (.circle) потому что он уже знает что это класс document.getElementsByClassName('circle')
// Если это selector то уже внутр  нам нужно ставить  (.circle) это может быть и id# и тег и тд

//function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
//}

//ask(
//   "Вы согласны?",
//   function () { alert("Вы согласились."); },
//   function () { alert("Вы отменили выполнение."); }
//);

let ask = (question, yes, no) => {
   if (confirm(question)) yes()
   else no();
}

ask(
   "Вы согласны?",
   function () { alert("Вы согласились."); },
   function () { alert("Вы отменили выполнение."); }
)