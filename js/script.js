"use strict";

//Основы ООП, прототипно ориентированное насоедование

//Истинно функциональный подход, объектно ориентированный подход, процедурный и так далее
//JavaScript является объектно ориентированным языком и главную роль в нем играет объект
//Он может содержать в себе методы свойства любой тип данных и представлять с собой целостную сущность

let str = "some";
let strObj = new String(str);

console.log(typeof (str));
console.log(typeof (strObj));//Так происходит когда мы javaScripte  пытаемся использлвать какой то метод на строке он оборачивает при выозове метода и возвращает после дейсвий

console.dir([1, 2, 3]);

const soldier = {
   health: 400,
   armor: 100,
   sayHello: function () {
      console.log('Hello');
   }
};
//Мы создаем новый объект john который будет прототипно наследоваться от солдата для того чтобы john  имел доступ к каким то функциям к каким то методам к каким то свойствам
const john = Object.create(soldier)
//Новосозданный рядовой john который нечего не содержит но уже может много чего
john.sayHello();


//const john = {
//   health: 100
//};

//Старый спопосб прототипирования которая может встретится н сейчас не стоит ипользовать
//john.__proto__ = soldier;

//Object.setPrototypeOf(john, soldier);//Эта запись идентична верхней записи



//console.log(john.armor);
//john.sayHello();

// ООП это наука о том как делать правильную архитектуру
//Так же JavaScript можно назвать прототипно ориентированным языком это частный случай ООП один из его стилей
//В JavaScripte все строится на прототипах